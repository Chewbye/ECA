<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
/*  margin: 10px; */
  position: relative;
  width: 960px;
}

form {
  position: absolute;
  right: 10px;
  top: 10px;
}

#legend {
  padding: 10px 0 0 3px;
}


</style>
<form>
  <label><input type="radio" name="mode" value="SMO" checked> SMO</label>
  <label><input type="radio" name="mode" value="IBK" > IBK (K=3)</label>
<label><input type="radio" name="mode" value="J48" > J48</label>
<label><input type="radio" name="mode" value="NaivesBayes" > NaivesBayes</label>
</form>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>


var width = 960,
    height = 700,
    radius = Math.min(width, height) / 2,
    /*color = d3.scale.ordinal()
    	    .range(["#1ECF56", "#F33232", "#F0EC23"]);*/
    color = {
  "positive": "#1ECF56",
  "negative": "#F33232",
  "mixed": "#F0EC23"
};


function drawLegend() {

  // Dimensions of legend item: width, height, spacing, radius of rounded rect.
  var li = {
    w: 75, h: 30, s: 3, r: 3
  };

  var legend = d3.select("body").append("svg:svg")
      .attr("width", li.w)
      .attr("height", d3.keys(color).length * (li.h + li.s));

  var g = legend.selectAll("g")
      .data(d3.entries(color))
      .enter().append("svg:g")
      .attr("transform", function(d, i) {
              return "translate(0," + i * (li.h + li.s) + ")";
           });

  g.append("svg:rect")
      .attr("rx", li.r)
      .attr("ry", li.r)
      .attr("width", li.w)
      .attr("height", li.h)
      .style("fill", function(d) { return d.value; });

  g.append("svg:text")
      .attr("x", li.w / 2)
      .attr("y", li.h / 2)
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle")
      .text(function(d) { return d.key; });
}


drawLegend();

var timeout = setTimeout(function() {
  d3.select("input[value=\"SMO\"]").property("checked", true).each(change);
}, 2000);


d3.selectAll("input").on("change", change);

function change() {

	d3.select("#sunburstMatrice").remove();

	clearTimeout(timeout);

	d3.json(this.value+".json", function(error, root) {
	  if (error) throw error;

	  var marg = 20;

	  var svg = d3.select("body").append("svg")
	    .attr("id","sunburstMatrice")
	    .attr("width", width + marg)
	    .attr("height", height + marg)
	  .append("g")
	    .attr("transform", "translate(" + width / 2 + "," + height * .52 + ")");

	  var partition = d3.layout.partition()
	    .sort(null)
	    .size([2 * Math.PI, radius * radius])
	    .value(function(d) { return d.size; });

	  var arc = d3.svg.arc()
	    .startAngle(function(d) { return d.x; })
	    .endAngle(function(d) { return d.x + d.dx; })
	    .innerRadius(function(d) { return Math.sqrt(d.y); })
	    .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });

	  var path = svg.datum(root).selectAll("path")
	      .data(partition.nodes)
	    .enter().append("path")
	      .attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
	      .attr("d", arc)
	      .style("stroke", "#000000")
	      .style("fill", function(d) { return color[d.name]; })
	      .style("fill-rule", "evenodd")
	      .each(stash);

	    path
		.data(partition.value(value).nodes)
	      .transition()
		.duration(1500)
		.attrTween("d", arcTween);
	  });
}

// Stash the old values for transition.
function stash(d) {
  d.x0 = d.x;
  d.dx0 = d.dx;
}

// Interpolate the arcs in data space.
function arcTween(a) {
  var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
  return function(t) {
    var b = i(t);
    a.x0 = b.x;
    a.dx0 = b.dx;
    return arc(b);
  };
}

//d3.select(self.frameElement).style("height", height + "px");

</script>

